//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SrvSegurinet
{
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SegurinetUser", Namespace="http://schemas.datacontract.org/2004/07/BCP.SegurinetWCF.WebApi")]
    public partial class SegurinetUser : object
    {
        
        private string CodigoErrorSegurinetField;
        
        private string ErrorSegurinetField;
        
        private string MatriculaField;
        
        private string NombreUsuarioField;
        
        private System.Collections.Generic.Dictionary<string, bool> PoliticasUsuarioField;
        
        private string[] RoleField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CodigoErrorSegurinet
        {
            get
            {
                return this.CodigoErrorSegurinetField;
            }
            set
            {
                this.CodigoErrorSegurinetField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ErrorSegurinet
        {
            get
            {
                return this.ErrorSegurinetField;
            }
            set
            {
                this.ErrorSegurinetField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Matricula
        {
            get
            {
                return this.MatriculaField;
            }
            set
            {
                this.MatriculaField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string NombreUsuario
        {
            get
            {
                return this.NombreUsuarioField;
            }
            set
            {
                this.NombreUsuarioField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.Dictionary<string, bool> PoliticasUsuario
        {
            get
            {
                return this.PoliticasUsuarioField;
            }
            set
            {
                this.PoliticasUsuarioField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] Role
        {
            get
            {
                return this.RoleField;
            }
            set
            {
                this.RoleField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="SrvSegurinet.ISegurinet")]
    public interface ISegurinet
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISegurinet/LoginSA", ReplyAction="http://tempuri.org/ISegurinet/LoginSAResponse")]
        System.Threading.Tasks.Task<SrvSegurinet.SegurinetUser> LoginSAAsync(string Aplicativo, string Usuario, string password, string[] politicas);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISegurinet/ChangePasswordSA", ReplyAction="http://tempuri.org/ISegurinet/ChangePasswordSAResponse")]
        System.Threading.Tasks.Task<SrvSegurinet.SegurinetUser> ChangePasswordSAAsync(string Aplicativo, string Usuario, string oldPassword, string newPassword, string[] politicas);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISegurinet/Login", ReplyAction="http://tempuri.org/ISegurinet/LoginResponse")]
        System.Threading.Tasks.Task<SrvSegurinet.SegurinetUser> LoginAsync(string Aplicativo, string Usuario, string password, string[] politicas);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISegurinet/ChangePassword", ReplyAction="http://tempuri.org/ISegurinet/ChangePasswordResponse")]
        System.Threading.Tasks.Task<SrvSegurinet.SegurinetUser> ChangePasswordAsync(string Aplicativo, string Usuario, string oldPassword, string newPassword, string[] politicas);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
    public interface ISegurinetChannel : SrvSegurinet.ISegurinet, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
    public partial class SegurinetClient : System.ServiceModel.ClientBase<SrvSegurinet.ISegurinet>, SrvSegurinet.ISegurinet
    {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public SegurinetClient() : 
                base(SegurinetClient.GetDefaultBinding(), SegurinetClient.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.BasicHttpBinding_ISegurinet.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public SegurinetClient(EndpointConfiguration endpointConfiguration) : 
                base(SegurinetClient.GetBindingForEndpoint(endpointConfiguration), SegurinetClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public SegurinetClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(SegurinetClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public SegurinetClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(SegurinetClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public SegurinetClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public System.Threading.Tasks.Task<SrvSegurinet.SegurinetUser> LoginSAAsync(string Aplicativo, string Usuario, string password, string[] politicas)
        {
            return base.Channel.LoginSAAsync(Aplicativo, Usuario, password, politicas);
        }
        
        public System.Threading.Tasks.Task<SrvSegurinet.SegurinetUser> ChangePasswordSAAsync(string Aplicativo, string Usuario, string oldPassword, string newPassword, string[] politicas)
        {
            return base.Channel.ChangePasswordSAAsync(Aplicativo, Usuario, oldPassword, newPassword, politicas);
        }
        
        public System.Threading.Tasks.Task<SrvSegurinet.SegurinetUser> LoginAsync(string Aplicativo, string Usuario, string password, string[] politicas)
        {
            return base.Channel.LoginAsync(Aplicativo, Usuario, password, politicas);
        }
        
        public System.Threading.Tasks.Task<SrvSegurinet.SegurinetUser> ChangePasswordAsync(string Aplicativo, string Usuario, string oldPassword, string newPassword, string[] politicas)
        {
            return base.Channel.ChangePasswordAsync(Aplicativo, Usuario, oldPassword, newPassword, politicas);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_ISegurinet))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_ISegurinet))
            {
                return new System.ServiceModel.EndpointAddress("http://devscn00/SegurinetWCF/Segurinet.svc");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return SegurinetClient.GetBindingForEndpoint(EndpointConfiguration.BasicHttpBinding_ISegurinet);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return SegurinetClient.GetEndpointAddress(EndpointConfiguration.BasicHttpBinding_ISegurinet);
        }
        
        public enum EndpointConfiguration
        {
            
            BasicHttpBinding_ISegurinet,
        }
    }
}
