trigger:
  branches:
    include:
    - '*'
  paths:
    exclude:
    - readme.md

pool:
  name: $(GroupAgent)
  demands:
  - Agent.name -equals $(Agent)

variables:
  solution: '**/*.sln'
  project: '**/Card_App.csproj'
  testXUnit: '**/Card_Test.csproj'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'
  GroupAgent: Agentes_Desarrollo_Dev
  Agent: Agente_S60546
  Publish: 'MarketCardApp'
  PublishArtifact: '$(build.artifactstagingdirectory)'

steps:
- task: CmdLine@2
  displayName: 'Configuration Build'
  inputs:
    script:  |
      echo ----------------------------------------------------------------------------
      echo ----------------------------------------------------------------------------
      echo COMPUTER NAME:           $(COMPUTERNAME)
      echo ----------------------------------------------------------------------------
      echo ----------------------------------------------------------------------------
      echo DIRECTORIO ARTIFACT:     $(PublishArtifact)
      echo DEFINITION NAME:         $(Build.DefinitionName)
      echo PUBLISH:                 $(Publish)
      echo ----------------------------------------------------------------------------
      echo ----------------------------------------------------------------------------
      echo AGENT NAME:              $(Agent)
      echo SOLUTION:                $(solution)
      echo BUILD CONFIGURATION      $(buildConfiguration)
      echo SOURCE BRANCH NAME:      $(Build.SourceBranchName)
      echo BUILD NUMBER:            $(Build.BuildNumber)
      echo DIRECTORY:               $(System.DefaultWorkingDirectory)
      echo TEMP:                    $(Agent.TempDirectory)
      echo ----------------------------------------------------------------------------
      echo ----------------------------------------------------------------------------
- task: NuGetToolInstaller@1
  inputs:
    checkLatest: true

- task: NuGetCommand@2
  inputs:
    restoreSolution: '$(solution)'

- task: DotNetCoreCLI@2
  inputs:
    command: 'build'
    projects: '$(project)'
    arguments: '--configuration $(buildConfiguration)'

- task: DotNetCoreCLI@2
  displayName: 'Generate Publish'
  inputs:
    command: 'publish'
    publishWebProjects: true
    arguments: '--configuration $(BuildConfiguration) --output $(PublishArtifact)'
    zipAfterPublish: True

- task: PublishBuildArtifacts@1
  displayName: 'Publish Artifact: drop'
  inputs:
    PathtoPublish: '$(PublishArtifact)'
    ArtifactName: '$(Publish)'
    publishLocation: 'Container'

