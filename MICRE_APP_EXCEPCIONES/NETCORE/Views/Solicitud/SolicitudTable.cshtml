@using MICRE.ABSTRACTION.ENTITIES.Response
@model List<ExcepcionesCliente>
@{
    ViewData["Title"] = "Bandeja Excepciones";
}

<!-- Bootstrap Datepicker CSS -->
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-datepicker/1.8.0/css/bootstrap-datepicker.min.css">

<!-- jQuery -->
<script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
<!-- Bootstrap JS -->
<script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
<!-- Bootstrap Datepicker JS -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-datepicker/1.8.0/js/bootstrap-datepicker.min.js"></script>


<div>
    <div class="card">
        <div class="card-body">
            <div class="custom-border" style="display: flex; align-items: center;"><h5>Buscar por CI Nombre Producto Fecha de ingreso</h5></div>
            <div class="d-flex justify-content-between my-3">
                <input id="search" class="form-control me-2 w-25" type="search" placeholder="Dato a Buscar" aria-label="Search">
                <button type="button" class="btn btn-success" data-bs-toggle="modal" data-bs-target="#staticBackdrop">
                    Exportar
                </button>
            </div>
            <table class="table">
                <thead>
                    <tr>
                        <th scope="col">NRO.</th>
                        <th scope="col">CI</th>
                        <th scope="col">CLIENTE</th>
                        <th scope="col">PRODUCTOS</th>
                        <th scope="col">COD. SOLICITUD</th>
                        <th scope="col">ESTADO</th>
                        <th scope="col">FECHA INGRESO</th>
                        <th scope="col">FECHA MODIFICACIÓN</th>
                        <th scope="col">ACCIONES</th>
                    </tr>
                </thead>
                <tbody id="excepcionesCliente">
                </tbody>
            </table>
            <nav aria-label="pagination" class="d-flex justify-content-center">
                <ul class="pagination" id="pagination">
                </ul>
            </nav>
        </div>
    </div>
</div>

<!-- Modal -->
<div class="modal fade" id="staticBackdrop" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="staticBackdropLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="staticBackdropLabel">Generación de reporte de solicitudes</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body d-flex flex-column align-items-center">
                <div class="d-flex flex-column align-items-center">
                    <div class="form-group">
                        <label for="datepicker">Fecha de inicio</label>
                        <div class="row">
                            <div class="col-auto"><input type="text" class="form-control" id="datepickerInit"></div>
                            <div class="col-auto">
                                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-calendar2" viewBox="0 0 16 16">
                                    <path d="M3.5 0a.5.5 0 0 1 .5.5V1h8V.5a.5.5 0 0 1 1 0V1h1a2 2 0 0 1 2 2v11a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V3a2 2 0 0 1 2-2h1V.5a.5.5 0 0 1 .5-.5M2 2a1 1 0 0 0-1 1v11a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1V3a1 1 0 0 0-1-1z" />
                                    <path d="M2.5 4a.5.5 0 0 1 .5-.5h10a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-.5.5H3a.5.5 0 0 1-.5-.5z" />
                                </svg>
                            </div>
                        </div>
                    </div>

                    <div class="form-group">
                        <label for="datepicker">Fecha final</label>
                        <div class="row">
                            <div class="col-auto"><input type="text" class="form-control" id="datepicker"></div>
                            <div class="col-auto">
                                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-calendar2" viewBox="0 0 16 16">
                                    <path d="M3.5 0a.5.5 0 0 1 .5.5V1h8V.5a.5.5 0 0 1 1 0V1h1a2 2 0 0 1 2 2v11a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V3a2 2 0 0 1 2-2h1V.5a.5.5 0 0 1 .5-.5M2 2a1 1 0 0 0-1 1v11a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1V3a1 1 0 0 0-1-1z" />
                                    <path d="M2.5 4a.5.5 0 0 1 .5-.5h10a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-.5.5H3a.5.5 0 0 1-.5-.5z" />
                                </svg>
                            </div>
                        </div>
                    </div>
                </div>
                <script>
                    $(document).ready(function () {
                        $.fn.datepicker.dates['es'] = {
                            days: ['Domingo', 'Lunes', 'Martes', 'Miércoles', 'Jueves', 'Viernes', 'Sábado'],
                            daysShort: ['Dom', 'Lun', 'Mar', 'Mié', 'Juv', 'Vie', 'Sáb'],
                            daysMin: ['Do', 'Lu', 'Ma', 'Mi', 'Ju', 'Vi', 'Sá'],
                            months: ['Enero', 'Febrero', 'Marzo', 'Abril', 'Mayo', 'Junio', 'Julio', 'Agosto', 'Septiembre', 'Octubre', 'Noviembre', 'Diciembre'],
                            monthsShort: ['Ene', 'Feb', 'Mar', 'Abr', 'May', 'Jun', 'Jul', 'Ago', 'Sep', 'Oct', 'Nov', 'Dic'],
                            today: 'Hoy',
                            clear: 'Limpiar',
                            format: 'dd/mm/yy',
                            titleFormat: "MM yyyy",
                            weekStart: 1
                        };
                        $('#datepickerInit').datepicker({
                            format: 'dd/mm/yyyy',
                            autoclose: true,
                            todayHighlight: true,
                            language: 'es'
                        });
                        $('#datepicker').datepicker({
                            format: 'dd/mm/yyyy',
                            autoclose: true,
                            todayHighlight: true,
                            language: 'es'
                        });
                    });
                </script>

            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cerrar</button>
                <button type="button" class="btn btn-primary" onclick="generateExcel()">Descargar</button>
            </div>
        </div>
    </div>
</div>


@* Modal DesEstimar Caso *@
<div class="modal fade" id="desestimarCaso" tabindex="-1" role="dialog" aria-labelledby="exampleModalCenterTitle" aria-hidden="true">
</div>

@* Modal Confirmar Impresion *@
<div class="modal fade" id="confirmarImpresion" tabindex="-1" role="dialog" aria-labelledby="exampleModalCenterTitle" aria-hidden="true">
</div>

<script>
    const obtenerExcepcionesUrl = '@Url.Action("ObtenerExcepciones", "Solicitud")';
    const desestimarCasoClienteUrl = '@Url.Action("DesestimarCasoCliente", "Solicitud")';

    let excepciones = [];
    let filteredExcepciones = [];
    let paginacion = {
        pageSize: 10,
        currentPage: 1,
        total: 0
    };

    $(document).ready(function () {
        $('#search').on('input', function () {
            const searchTerm = $(this).val();
            filterExcepciones(searchTerm);
        });

        cargarExcepciones();
    });
    
    function formatDate(dateString) {
        const date = new Date(dateString);
        const day = String(date.getDate()).padStart(2, '0');
        const month = String(date.getMonth() + 1).padStart(2, '0');
        const year = date.getFullYear();
        return `${day}/${month}/${year}`;
    }

    function filterExcepciones(searchTerm) {
        const lowerCaseSearchTerm = searchTerm.toLowerCase();
        filteredExcepciones = excepciones.filter(item =>
            item.idcNumero.toString().toLowerCase().includes(lowerCaseSearchTerm) ||
            item.idcExtension.toString().toLowerCase().includes(lowerCaseSearchTerm) ||
            item.nombres.toString().toLowerCase().includes(lowerCaseSearchTerm) ||
            item.paterno.toString().toLowerCase().includes(lowerCaseSearchTerm) ||
            item.materno.toString().toLowerCase().includes(lowerCaseSearchTerm) ||
            item.productos.some(p => p.productoDescripcion.toString().toLowerCase().includes(lowerCaseSearchTerm)) ||
            formatDate(item.fechaRegistro.toString()).toLowerCase().includes(lowerCaseSearchTerm)
        );
        paginacion.total = filteredExcepciones.length;
        paginacion.currentPage = 1;
        updateContent();
    }

    function cargarExcepciones() {
        $.ajax({
            url: obtenerExcepcionesUrl,
            type: 'GET',
            success: function (response) {
                excepciones = response;
                filteredExcepciones = excepciones;
                paginacion.total = excepciones.length;
                updateContent();
            },
            error: function (xhr, status, error) {
                console.error('Error:', error);
            }
        });
    }

    function formatDate(dateString) {
        const options = {
            year: 'numeric',
            month: '2-digit',
            day: '2-digit',
            hour: '2-digit',
            minute: '2-digit'
        };
        return new Date(dateString).toLocaleString('en-GB', options).replace(',', '');
    }

    function renderExcepcionesCliente(excepcionesArray) {
        let content = '';
        let count = (paginacion.currentPage - 1) * paginacion.pageSize;
        for (const item of excepcionesArray) {
            let productos = '';
            let contentCodigosSolicitud = '';
            let codigosSolicitud = [];
            count = count + 1;
            for (const p of item.productos) {
                productos += `<small class="d-block">${p.productoDescripcion}</small>`;
                codigosSolicitud = [...codigosSolicitud, ...p.codigosSolicitud];
            }

            for (const c of new Set(codigosSolicitud)) {
                contentCodigosSolicitud += `<small class="d-block">${c}</small>`;
            }
            let iconoImpreso = '';
            if (item.documentoImpreso) {
                iconoImpreso = `<i class="fa-solid fa-print text-primary" data-toggle="tooltip" data-placement="top" title="Documento Impreso"></i>`;
            }
            let estadoContent = '';
            const total = item.totalExcepciones - (item.excepcionesAprobadas + item.excepcionesRechazadas + item.excepcionesObservadas);
            switch (item.estado) {
                case 'EN PROCESO DE REVISIÓN':
                    estadoContent = `<th><div>`;
                    if (item.excepcionesAprobadas > 0) {
                        estadoContent += `<span class="bg-success badge badge-pill badge-success me-1" data-toggle="tooltip" data-placement="top" title="Excepciones Aprobadas">${item.excepcionesAprobadas}</span>`;
                    }
                    if (item.excepcionesRechazadas > 0) {
                        estadoContent += `<span class="bg-danger badge badge-pill badge-success me-1" data-toggle="tooltip" data-placement="top" title="Excepciones Rechazadas">${item.excepcionesRechazadas}</span>`;
                    }
                    if (item.excepcionesObservadas > 0) {
                        estadoContent += `<span class="bg-warning badge badge-pill badge-success me-1" data-toggle="tooltip" data-placement="top" title="Excepciones Observadas">${item.excepcionesObservadas}</span>`;
                    }
                    if (total > 0) {
                        estadoContent += `<span class="bg-secondary badge badge-pill badge-success" data-toggle="tooltip" data-placement="top" title="Excepciones Pendientes">${total}</span>`;
                    }
                    estadoContent += `${iconoImpreso}</div></th>`;
                    break;
                case 'APROBADO':
                    estadoContent = `<th class='text-success font-weight-bold' style="font-weight: normal !important">${item.estado} ${iconoImpreso}</th>`;
                    break;
                case 'RECHAZADO':
                    estadoContent = `<th class='text-danger font-weight-bold' style="font-weight: normal !important">${item.estado} ${iconoImpreso}</th>`;
                    break;
                case 'OBSERVADO':
                    estadoContent = `<th class='text-warning font-weight-bold' style="font-weight: normal !important">${item.estado}</th>`;
                    break;
                default:
                    estadoContent = `<th style="font-weight: normal !important">${item.estado}</th>`;
                    break;
            }

            let generarDocumento = '';
            if (item.generarDocumento) {
                generarDocumento = `<li>
                                                        <a class="dropdown-item text-primary" onclick="abrirModalConfirmarImpresion('${item.idCliente}', '${item.idcNumero} ${item.idcExtension}','${item.idcComplemento}', '${item.nombres} ${item.paterno} ${item.materno}')">
                                                    <i class="fa-solid fa-file-pdf me-2"></i> Generar documento
                                                </a>
                                            </li>`;
            }

            const redirect = '@Url.Action("ResumenCaso", "Solicitud", new { idCliente = "__ID__" })'.replace("__ID__", item.idCliente);
            content += `
                                                  <tr>
                                                        <th style="font-weight: normal !important">${item.idCliente}</th>
                                                        <th style="font-weight: normal !important">${item.idcNumero} ${item.idcExtension} ${item.idcComplemento}</th>
                                                        <th style="font-weight: normal !important">${item.nombres} ${item.paterno} ${item.materno}</th>
                                                        <th style="font-weight: normal !important">${productos}</th>
                                                        <th style="font-weight: normal !important">${contentCodigosSolicitud}</th>
                                                                    ${estadoContent}
                                                        <th style="font-weight: normal !important">${formatDate(item.fechaRegistro)}</th>
                                                        <th style="font-weight: normal !important">${formatDate(item.fechaModificacion)}</th>
                                                        <th>
                                                            <div class="dropdown text-center">
                                                                <button class="dropdown-toggle custom-dropdown-toggle w-50" type="button" id="dropdownMenuButton" data-bs-toggle="dropdown" aria-expanded="false" style="background: none; border: none; padding: 0;">
                                                                    <i class="fa-solid fa-ellipsis-vertical"></i>
                                                                </button>
                                                                <ul class="dropdown-menu dropdown-menu-end" aria-labelledby="dropdownMenuButton" >
                                                                    <li>
                                                                        <a class="dropdown-item" href="${redirect}">
                                                                            <i class="fa-solid fa-eye me-2"></i> Ver caso
                                                                        </a>
                                                                    </li>
                                                                    ${generarDocumento}
                                                                    <li>
                                                                                            <a class="dropdown-item btn text-danger" onclick="desestimarCaso('${item.idCliente}', '${item.nombres} ${item.paterno} ${item.materno}', '${item.idcNumero} ${item.idcExtension} ${item.idcComplemento}')">
                                                                                    <i class="fa-solid fa-trash me-2"></i> Desestimar caso
                                                                        </a>
                                                                    </li>
                                                                </ul>
                                                            </div>
                                                        </th>
                                                    </tr>
                                                    `;
        }
        $("#excepcionesCliente").html(content);
    }

    function generarDocumento(idCliente, idc, complemento, nombres) {
        const redirectGenerarDocumento = '@Url.Action("GenerarDocumentoCliente", "Solicitud", new { idCliente = "__ID__" })'.replace("__ID__", idCliente);
        $.ajax({
            url: redirectGenerarDocumento,
            type: 'POST',
            success: function (response) {
                cerrarModal('confirmarImpresion');
                const byteCharacters = atob(response);
                const byteNumbers = new Array(byteCharacters.length);
                for (let i = 0; i < byteCharacters.length; i++) {
                    byteNumbers[i] = byteCharacters.charCodeAt(i);
                }
                const byteArray = new Uint8Array(byteNumbers);


                const blob = new Blob([byteArray], { type: 'application/pdf' });

                const link = document.createElement('a');
                link.href = URL.createObjectURL(blob);
                link.download = `Reporte ${idc} ${complemento} ${nombres} ${Date.now()}.pdf`;

                document.body.appendChild(link);
                link.click();
                document.body.removeChild(link);
                cargarExcepciones();
            },
            error: function (xhr, status, error) {
                cerrarModal('confirmarImpresion');
                console.error('Error:', error);
            }
        });
    }

    function paginate(array, pageSize, pageNumber) {
        const startIndex = (pageNumber - 1) * pageSize;
        const endIndex = startIndex + pageSize;
        return array.slice(startIndex, endIndex);
    }

    function renderPagination() {
        const $paginationElement = $('#pagination');
        $paginationElement.empty();

        const totalPages = Math.ceil(paginacion.total / paginacion.pageSize);

        const prevDisabled = paginacion.currentPage === 1 ? 'disabled' : '';
        const nextDisabled = paginacion.currentPage === totalPages ? 'disabled' : '';

        $paginationElement.append(`
                                                        <li class="page-item ${prevDisabled}">
                                                            <a class="page-link" href="#" tabindex="-1" aria-disabled="true" onclick="changePage(${paginacion.currentPage - 1})">Anterior</a>
                                                        </li>
                                                    `);

        for (let i = 1; i <= totalPages; i++) {
            const activeClass = paginacion.currentPage === i ? 'active' : '';
            $paginationElement.append(`
                                                            <li class="page-item ${activeClass}">
                                                                <a class="page-link" href="#" onclick="changePage(${i})">${i}</a>
                                                            </li>
                                                        `);
        }

        $paginationElement.append(`
                                                        <li class="page-item ${nextDisabled}">
                                                            <a class="page-link" href="#" onclick="changePage('${paginacion.currentPage + 1}')">Siguiente</a>
                                                        </li>
                                                        <li>
                                                            <select class="form-select" aria-label="Default select example" onchange="changePageSize(this.value)">
                                                                <option value="3" ${paginacion.pageSize === 3 ? 'selected' : ''}>3</option>
                                                                <option value="5" ${paginacion.pageSize === 5 ? 'selected' : ''}>5</option>
                                                                <option value="10" ${paginacion.pageSize === 10 ? 'selected' : ''}>10</option>
                                                            </select>
                                                        </li>
                                                    `);
    }

    function changePage(pageNumber) {
        const totalPages = Math.ceil(paginacion.total / paginacion.pageSize);
        if (pageNumber < 1 || pageNumber > totalPages) return;
        paginacion.currentPage = pageNumber;
        updateContent();
    }

    function changePageSize(pageSize) {
        paginacion.pageSize = parseInt(pageSize);
        paginacion.currentPage = 1;
        updateContent();
    }

    function updateContent() {
        const currentPageItems = paginate(filteredExcepciones, paginacion.pageSize, paginacion.currentPage);
        renderExcepcionesCliente(currentPageItems);
        renderPagination();
    }

    function desestimarCaso(idCliente, nombre, ci) {
        $("#desestimarCaso").html(`
                   <div class="modal-dialog modal-dialog-centered" role="document">
                    <div class="modal-content">
                      <div class="modal-header">
                        <h5 class="modal-title" id="exampleModalLongTitle">DESESTIMAR CASO ${idCliente}</h5>
                      </div>
                      <div id="contentDesestimarCaso" class="modal-body">
                            <h6>¿Esta seguro de destimar el caso del cliente <strong class="text-primary-emphasis">${nombre}</strong> con carnet <strong class="text-primary-emphasis">${ci}</strong>?</h6>
                      </div>
                      <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" onclick="cerrarModalDesetimar()">Cerrar</button>
                            <button type="button" class="btn btn-primary" onclick="desestimarCasoPost('${idCliente}')">Aceptar</button>
                      </div>
                    </div>
                  </div>`);
        $("#desestimarCaso").modal("show");
    }

    function abrirModalConfirmarImpresion(idCliente, idc, complemento, nombres) {
        $("#confirmarImpresion").html(`
                       <div class="modal-dialog modal-dialog-centered" role="document">
                        <div class="modal-content">
                          <div class="modal-header">
                            <h5 class="modal-title" id="exampleModalLongTitle">GENERAR DOCUMENTO</h5>
                          </div>
                          <div id="contentDesestimarCaso" class="modal-body">
                              <h6>¿Está seguro de que desea <b class="text-primary">generar el documento</b>? No será posible agregar excepciones más adelante.</h6>
                          </div>
                          <div class="modal-footer">
                               <button type="button" class="btn btn-secondary" onclick="cerrarModal('confirmarImpresion')">Cerrar</button>
                                   <button type="button" class="btn btn-primary" onclick="generarDocumento('${idCliente}', '${idc}','${complemento}', '${nombres}')">Aceptar</button>
                          </div>
                        </div>
                      </div>`);
        $("#confirmarImpresion").modal("show");
    }

    function desestimarCasoPost(idCliente) {
        $.ajax({
            url: desestimarCasoClienteUrl + "?idCliente=" + idCliente,
            type: 'POST',
            data: {},
            success: function (response) {
                cerrarModalDesetimar();
                cargarExcepciones();
            },
            error: function (xhr, status, error) {
                console.error('Error:', error);
            }
        });
    }

    function cerrarModalDesetimar() {
        $("#desestimarCaso").modal("hide");
    }

    function cerrarModal(id) {
        $(`#${id}`).modal("hide");
    }

    function parseDate(dateString) {
        const parts = dateString.split('/');
        const day = parseInt(parts[0], 10);
        const month = parseInt(parts[1], 10) - 1;
        const year = parseInt(parts[2], 10);
        return new Date(year, month, day);
    }

    function generateExcel() {
        const initDate = parseDate($("#datepickerInit").val());
        const endDate = parseDate($("#datepicker").val());
        initDate.setHours(0, 0, 0, 0);
        endDate.setHours(23, 59, 59, 999);

        if (isNaN(initDate) || isNaN(endDate)) {
            alert("Por favor, selecciona fechas válidas.");
            return;
        }
        var data = excepciones
            .filter(exp => {
                const fechaRegistro = new Date(exp.fechaRegistro);
                fechaRegistro.setHours(0, 0, 0, 0);
                return fechaRegistro >= initDate && fechaRegistro <= endDate;
            })
            .map(exp => {
                return {
                    'Nro.': exp.idCliente,
                    'CI': `${exp.idcNumero} ${exp.idcExtension}`,
                    'CLIENTE': `${exp.nombres} ${exp.paterno} ${exp.materno}`,
                    'PRODUCTOS': exp.productos.map(p => p.productoDescripcion).join(', '),
                    'ESTADO': exp.estado,
                    'FECHA INGRESO': formatDate(exp.fechaRegistro),
                    'FECHA MODIFICACIÓN': formatDate(exp.fechaModificacion)
                };
            });
        var ws = XLSX.utils.json_to_sheet(data);

        ws['!autofilter'] = { ref: "A1:G1" };

        ws['!cols'] = [
            { wch: 10 }, // Nro.
            { wch: 20 }, // CI
            { wch: 30 }, // CLIENTE
            { wch: 40 }, // PRODUCTOS
            { wch: 15 }, // ESTADO
            { wch: 20 }, // FECHA INGRESO
            { wch: 25 }  // FECHA MODIFICACIÓN
        ];

        var wb = XLSX.utils.book_new();
        XLSX.utils.book_append_sheet(wb, ws, "REPORTE EXCEPCIONES");

        XLSX.writeFile(wb, `REPORTE EXCEPCIONES ${Date.now()}.xlsx`);
    }
</script>
